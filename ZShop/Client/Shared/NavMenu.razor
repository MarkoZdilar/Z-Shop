@inject ICategoryService CategoryService
@inject IPlatformService PlatformService
@inject ISyncLocalStorageService LocalStorage
@inject ICartService CartService
@inject AuthenticationStateProvider AuthStateProvider
@inject IProductService ProductService
@inject NavigationManager NavigationManager
@inject Services.AuthService AuthService
@implements IDisposable


<nav class="navbar fixed-top navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="#"><h2>Z-Shop</h2></a>
        <div class="collapse navbar-collapse" id="navbarNavAltMarkup">
            <div class="navbar-nav">
                <a class="nav-link" id="navigation-link" aria-current="page" href="">Home</a>
                @foreach (var category in CategoryService.Categories)
                {
                    <a class="nav-link navigation" id="navigation-link" href="@category.Url">@category.Name</a>
                }
            </div>
        </div>
        <div style="width: 10%; background-color: white;">
            <BlazoredTypeahead SearchMethod="@SearchProduct"
                               TValue="Product"
                               TItem="Product"
                               Value="selectedProduct"
                               ValueChanged="HandleSearch"
                               ValueExpression="@(() => selectedProduct)"
                               placeholder="Search..">
                <SelectedTemplate>
                    @context.Title
                </SelectedTemplate>
                <ResultTemplate>
                    @context.Title
                </ResultTemplate>
                <NotFoundTemplate>
                    Soryy, there weren't any products found.
                </NotFoundTemplate>
            </BlazoredTypeahead>
        </div>
        <div class="cart-button" style="padding-left: 2%; ">
            <a href="cart" class="btn btn-light">
                <i class="oi oi-cart"></i>
                Cart
                <span class="badge badge-pill badge-success">@GetProductCount()</span>
            </a>
        </div>
        <AuthorizeView>
            <NotAuthorized>
                <NavLink class="nav-link" href="login" id="login-link" style="color: #28A745;">
                    <span class="oi oi-account-login" aria-hidden="true"></span>Login
                </NavLink>
            </NotAuthorized>
            <Authorized>
                <NavLink class="nav-link" href="create">
                    <span class=" oi oi-plus" aria-hidden="true"></span>Create
                </NavLink>
                <a class="nav-link" @onclick="Logout" style="cursor: pointer">
                    <span class="oi oi-account-logout" aria-hidden="true"></span>Logout
                </a>
            </Authorized>

        </AuthorizeView>
    </div>
</nav>

@code {
    private Product selectedProduct;
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected override void OnInitialized()
    {
        CartService.OnChange += StateHasChanged; //StateHasChanged will be called when OnChange event is invoked(raised)
    }

    public void Dispose()//we need to implement this function because we implement IDisposable interface
    {
        CartService.OnChange -= StateHasChanged;
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        await CategoryService.LoadCategories();
        await PlatformService.LoadPlatforms();
    }

    private int GetProductCount()
    {
        var cart = LocalStorage.GetItem<List<ProductVariant>>("cart");
        return cart != null ? cart.Count : 0;
    }

    private async Task Logout()
    {
        await AuthService.Logout();
    }

    private void HandleSearch(Product product)
    {
        if (product == null) return;
        selectedProduct = product;
        NavigationManager.NavigateTo($"product/{selectedProduct.Id}");
    }

    private async Task<IEnumerable<Product>> SearchProduct(string searchText)
    {
        var response = await ProductService.SearchProducts(searchText);
        return response;
    }
}
